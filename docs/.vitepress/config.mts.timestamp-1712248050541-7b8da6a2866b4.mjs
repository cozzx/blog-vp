// docs/.vitepress/config.mts
import { defineConfig } from "file:///Users/zhangtao/Code/JS/blog-vp/node_modules/.pnpm/vitepress@1.0.0-rc.31_@algolia+client-search@4.20.0_postcss@8.4.32_search-insights@2.11.0/node_modules/vitepress/dist/node/index.js";

// docs/.vitepress/sidebar.ts
import path from "node:path";
import fs from "node:fs";
var DIR_PATH = path.resolve();
var WHITE_LIST = ["index.md", ".vitepress", "node_modules", ".idea", "assets"];
var isDirectory = (path2) => fs.lstatSync(path2).isDirectory();
var intersections = (arr1, arr2) => Array.from(new Set(arr1.filter((item) => !new Set(arr2).has(item))));
function getList(params, path1, pathname, isFilename) {
  const res = [];
  for (let file in params) {
    const dir = path.join(path1, params[file]);
    const isDir = isDirectory(dir);
    if (isDir) {
      const files = fs.readdirSync(dir);
      const itemList = getList(files, dir, `${pathname}/${params[file]}`, isFilename);
      if (itemList.length > 0) {
        res.push({
          text: params[file],
          collapsible: true,
          collapsed: true,
          items: itemList
        });
      }
    } else {
      const filename = path.basename(params[file]).slice(0, -3);
      const title = isFilename ? filename : get_title(`${pathname}/${params[file]}`);
      const suffix = path.extname(params[file]);
      if (suffix !== ".md") {
        continue;
      }
      res.push({
        text: title,
        link: `${pathname}/${filename}`
      });
    }
  }
  return res;
}
function get_title(file) {
  try {
    const filepath = path.join(DIR_PATH, "docs", file);
    const fileContent = fs.readFileSync(filepath, "utf8");
    const lines = fileContent.split("\n");
    const count = Math.min(5, fileContent.split("\n").length);
    for (let i = 0; i < count; i++) {
      const line = lines[i].trim();
      if (line.startsWith("title:")) {
        return line.substr(line.indexOf("title:") + 6).trim();
      } else if (line.startsWith("# ")) {
        return line.substr(line.indexOf("# ") + 2).trim();
      }
    }
  } catch (error) {
    console.error(error);
  }
  return "";
}
var set_sidebar = (pathname, isFilename = false) => {
  const dirPath = path.join(DIR_PATH, "docs", pathname);
  const files = fs.readdirSync(dirPath);
  const items = intersections(files, WHITE_LIST);
  return getList(items, dirPath, pathname, isFilename);
};

// docs/.vitepress/config.mts
var mode = process.argv[process.argv.length - 1];
var config_default = defineConfig({
  title: "AR Doc",
  base: "/blog-vp/",
  description: "A Technology Sharing Site",
  locales: {
    root: {
      label: "Change language",
      lang: "zh-CN"
    }
  },
  markdown: {
    lineNumbers: true,
    container: {
      tipLabel: "\u63D0\u793A",
      warningLabel: "\u8B66\u544A",
      dangerLabel: "\u5371\u9669",
      infoLabel: "\u4FE1\u606F",
      detailsLabel: "\u8BE6\u60C5"
    }
  },
  themeConfig: {
    siteTitle: "AR",
    logo: "/img/ar.logo.svg",
    search: {
      provider: "local"
    },
    outline: "deep",
    // https://vitepress.dev/reference/default-theme-config
    nav: [
      { text: "Posts", link: "/posts/index" },
      { text: "Model", link: "/model/read" },
      {
        text: "Command",
        items: [
          { text: "linux", link: "/command/linux/" },
          { text: "mac", link: "/command/mac/" },
          { text: "win", link: "/command/win/" }
        ]
      },
      {
        text: "Code",
        items: [
          { text: "Java", link: "/code/java/read.md" },
          { text: "Python", link: "/code/python/01_basic" },
          { text: "Golang", link: "/code/go/basic/01_var" },
          {
            items: [
              { text: "MySQL", link: "/code/mysql/00_command" },
              { text: "MongoDB", link: "/code/mongo/00_command" },
              { text: "Redis", link: "/code/redis/01_datatype" },
              { text: "Nginx", link: "/code/nginx/01_var" },
              { text: "Docker", link: "/code/docker/01_basic" }
            ]
          },
          {
            items: [
              { text: "other", link: "/code/other/os" }
            ]
          }
        ]
      },
      { text: "Toolbox", link: "/toolbox/read" }
    ],
    sidebar: {
      "/posts": [
        {
          text: "\u{1F4D5} \u5F00\u53D1\u7B14\u8BB0",
          items: set_sidebar("/posts/code")
        },
        {
          text: "\u{1F5A5} macos\u7B14\u8BB0",
          items: set_sidebar("/posts/mac")
        }
      ],
      "/model": [
        { text: "\u2728 \u9605\u8BFB\u987B\u77E5", link: "/model/read" },
        {
          text: "\u{1F3ED} \u8BA4\u77E5\u6A21\u578B",
          items: set_sidebar("/model/cognitive")
        },
        {
          text: "\u{1F3ED} \u5B66\u4E60\u6A21\u578B",
          items: set_sidebar("/model/learning")
        }
      ],
      "/command/linux": set_sidebar("/command/linux", true),
      "/command/mac": set_sidebar("/command/mac", true),
      "/command/win": set_sidebar("/command/win", true),
      "/code/java": [
        { text: "\u2728 \u7D22\u5F15", link: "/code/java/read" },
        {
          text: "\u{1F34E} Java \u57FA\u7840",
          collapsible: true,
          collapsed: true,
          items: set_sidebar("/code/java/basic")
        },
        {
          text: "\u{1F9C0} Java Web",
          collapsible: true,
          collapsed: true,
          items: set_sidebar("/code/java/web")
        },
        {
          text: "\u{1F354} JVM",
          collapsible: true,
          collapsed: true,
          items: set_sidebar("/code/java/jvm")
        },
        {
          text: "\u{1F35F} JUC",
          collapsible: true,
          collapsed: true,
          items: set_sidebar("/code/java/juc")
        },
        {
          text: "\u{1F954} Spring",
          collapsible: true,
          collapsed: true,
          items: set_sidebar("/code/java/spring")
        },
        {
          text: "\u{1F372} SpringBoot",
          collapsible: true,
          collapsed: true,
          items: set_sidebar("/code/java/springboot")
        },
        {
          text: "\u{1F371} SpringCloud",
          collapsible: true,
          collapsed: true,
          items: [
            { text: "springcloud01", link: "/code/java/springcloud/sc01/SpringCloud01.md" },
            { text: "springcloud02", link: "/code/java/springcloud/sc02/SpringCloud02.md" },
            { text: "\u5F02\u6B65\u901A\u4FE1", link: "/code/java/springcloud/sc03/RabbitMQ.md" },
            { text: "\u5206\u5E03\u5F0F\u641C\u7D2201", link: "/code/java/springcloud/sc04/es01/elasticsearch01.md" },
            { text: "\u5206\u5E03\u5F0F\u641C\u7D2202", link: "/code/java/springcloud/sc04/es02/elasticsearch02.md" },
            { text: "\u5206\u5E03\u5F0F\u641C\u7D2203", link: "/code/java/springcloud/sc04/es03/elasticsearch03.md" },
            { text: "\u5FAE\u670D\u52A1\u4FDD\u62A4", link: "/code/java/springcloud/sc05/sentinel.md" },
            { text: "\u5206\u5E03\u5F0F\u4E8B\u52A1", link: "/code/java/springcloud/sc06/seata.md" },
            { text: "\u591A\u7EA7\u7F13\u5B58", link: "/code/java/springcloud/sc07/multi_level_cache.md" },
            { text: "RabbitMQ\u9AD8\u7EA7", link: "/code/java/springcloud/sc08/RabbitMQ-adv.md" },
            { text: "\u5FAE\u670D\u52A1\u9762\u8BD5\u9898", link: "/code/java/springcloud/sc09/interview.md" }
          ]
        },
        {
          text: "\u{1F369} SpringSecurity",
          collapsible: true,
          collapsed: true,
          items: set_sidebar("/code/java/springsecurity")
        }
      ],
      "/code/python": set_sidebar("/code/python"),
      "/code/go": [
        {
          text: "\u{1FAA4} Golang \u57FA\u7840",
          items: set_sidebar("/code/go/basic")
        },
        {
          text: "\u{1F579} Golang \u6A21\u5757",
          items: set_sidebar("/code/go/mod")
        }
      ],
      "/code/mysql": set_sidebar("/code/mysql"),
      "/code/nginx": set_sidebar("/code/nginx"),
      "/code/other": set_sidebar("/code/other"),
      "/toolbox": [
        { text: "\u2728 \u9605\u8BFB\u987B\u77E5", link: "/toolbox/read" },
        {
          text: "\u23F1 \u65F6\u95F4\u5DE5\u5177",
          items: set_sidebar("/toolbox/time")
        },
        {
          text: "\u{1F579} \u7F51\u7EDC\u5DE5\u5177",
          items: set_sidebar("/toolbox/net")
        }
      ]
    },
    //上下篇文本
    docFooter: {
      prev: "\u4E0A\u4E00\u7BC7",
      next: "\u4E0B\u4E00\u7BC7"
    },
    socialLinks: [
      { icon: "github", link: "https://github.com/cozzx/blog-vp" }
      // { icon: 'twitter', link: 'https://github.com/cozzx' },
      // { icon: 'discord', link: 'https://github.com/cozzx' },
      // { icon: 'facebook', link: 'https://github.com/cozzx' },
      // { icon: 'instagram', link: 'https://github.com/cozzx' },
      // { icon: 'linkedin', link: 'https://github.com/cozzx' },
      // { icon: 'slack', link: 'https://github.com/cozzx' },
      // { icon: {svg: ''}, link: 'https://github.com/cozzx' },
    ],
    footer: {
      message: "",
      copyright: "Copyright \xA9 2024 CodePlay. All rights reserved"
    }
  },
  // mpa: true,
  head: mode === "dev" ? [] : [
    [
      "script",
      { id: "baidu" },
      `var _hmt = _hmt || [];
      (function() {
      var hm = document.createElement("script");
      hm.src = "https://hm.baidu.com/hm.js?42d7e0f183103b4578ac0684f1342bde";
      var s = document.getElementsByTagName("script")[0];
      s.parentNode.insertBefore(hm, s);
      })();`
    ]
  ]
});
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,
